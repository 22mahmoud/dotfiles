#!/bin/zsh

typeset -gA GITSTATUS_SYMBOLS=(
  [ahead]='⇡'
  [behind]='⇣'
  [push_ahead]='⇢'
  [push_behind]='⇠'
  [stash]='*'
  [staged]='+'
  [unstaged]='!'
  [untracked_files]='?'
  [merge_conflict]='~'
  [separator]=' '
)

typeset -gA GITSTATUS_COLORS=(
  [path]='%F{blue}'
  [prompt_success]='%F{green}'
  [prompt_error]='%F{red}'
  [branch]='%F{magenta}'
  [clean]='%F{green}'
  [modified]='%F{yellow}'
  [untracked]='%F{blue}'
  [conflicted]='%F{red}'
  [stash]='%F{cyan}'
)

# Configuration
typeset -gi GITSTATUS_MAX_BRANCH_LENGTH=32

# git_status_fromat
function gsf() {
  local symbol="$1"
  local count="$2"
  local color="$3"
  [[ $count -gt 0 ]] && echo "${GITSTATUS_SYMBOLS[separator]}${GITSTATUS_COLORS[$color]}${GITSTATUS_SYMBOLS[$symbol]}${count}"
}

# git_status_fromat_branch
function gs_fb() {
  local branch=" $1"
  if (( $#branch > GITSTATUS_MAX_BRANCH_LENGTH )); then
    local half_length=$(( (GITSTATUS_MAX_BRANCH_LENGTH - 1) / 2 ))
    echo "${branch[1,$half_length]}…${branch[-$half_length,-1]}"
  else
    echo "$branch"
  fi
}

# Update Git status prompt
function gitstatus_prompt_update() {
  emulate -L zsh
  typeset -g  GITSTATUS_PROMPT=''
  typeset -gi GITSTATUS_PROMPT_LEN=0

  # Query git status
  gitstatus_query 'MY' || return 1
  [[ $VCS_STATUS_RESULT == 'ok-sync' ]] || return 0

  local p=" on ${GITSTATUS_COLORS[branch]}"

  # Determine branch/tag/commit
  if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
    p+="$(gs_fb "${VCS_STATUS_LOCAL_BRANCH}")"
  elif [[ -n $VCS_STATUS_TAG ]]; then
    p+="#$(gs_fb "${VCS_STATUS_TAG}")"
  else
    p+=" @${VCS_STATUS_COMMIT[1,8]}"
  fi

  # Remote status
  if (( VCS_STATUS_COMMITS_BEHIND || VCS_STATUS_COMMITS_AHEAD )); then
    p+="${GITSTATUS_SYMBOLS[separator]}"
    (( VCS_STATUS_COMMITS_BEHIND )) && p+=$(gsf behind "$VCS_STATUS_COMMITS_BEHIND" clean)
    (( VCS_STATUS_COMMITS_AHEAD )) && p+=$(gsf ahead "$VCS_STATUS_COMMITS_AHEAD" clean)
  fi

  # Push remote status
  if (( VCS_STATUS_PUSH_COMMITS_BEHIND || VCS_STATUS_PUSH_COMMITS_AHEAD )); then
    p+="${GITSTATUS_SYMBOLS[separator]}"
    (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=$(gsf push_behind "$VCS_STATUS_PUSH_COMMITS_BEHIND" clean)
    (( VCS_STATUS_PUSH_COMMITS_AHEAD )) && p+=$(gsf push_ahead "$VCS_STATUS_PUSH_COMMITS_AHEAD" clean)
  fi

  # Repository status
  (( VCS_STATUS_STASHES )) && p+=$(gsf stash "$VCS_STATUS_STASHES" stash)
  [[ -n $VCS_STATUS_ACTION ]] && p+="${GITSTATUS_SYMBOLS[separator]}${GITSTATUS_COLORS[conflicted]}${VCS_STATUS_ACTION}"
  (( VCS_STATUS_NUM_CONFLICTED )) && p+=$(gsf merge_conflict "$VCS_STATUS_NUM_CONFLICTED" conflicted)
  (( VCS_STATUS_NUM_STAGED )) && p+=$(gsf staged "$VCS_STATUS_NUM_STAGED" clean)
  (( VCS_STATUS_NUM_UNSTAGED )) && p+=$(gsf unstaged "$VCS_STATUS_NUM_UNSTAGED" modified)
  (( VCS_STATUS_NUM_UNTRACKED )) && p+=$(gsf untracked_files "$VCS_STATUS_NUM_UNTRACKED" untracked)

  GITSTATUS_PROMPT="${p}%f"
  GITSTATUS_PROMPT_LEN="${(m)#${${GITSTATUS_PROMPT//\%\%/x}//\%(f|<->F)}}"
}

# Setup prompt
function prompt_setup() {
  setopt prompt_subst
  typeset -g prompt_newline=$'\n%{\r%}'

  # Initialize gitstatus
  gitstatus_stop 'MY' && gitstatus_start -s -1 -u -1 -c -1 -d -1 'MY'

  # Set up hooks
  autoload -Uz add-zsh-hook
  add-zsh-hook precmd gitstatus_prompt_update

  # Configure prompt options
  setopt no_prompt_bang prompt_percent prompt_subst

  # Build prompt
  PROMPT=""
  PROMPT+='${prompt_newline}'
  PROMPT+='${GITSTATUS_COLORS[path]}%B%1~%b%f'
  PROMPT+='$GITSTATUS_PROMPT'
  PROMPT+='${prompt_newline}%(?.${GITSTATUS_COLORS[prompt_success]}.${GITSTATUS_COLORS[prompt_error]})%B%b%f '
}

# Initialize the prompt
prompt_setup
